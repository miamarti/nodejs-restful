
/**
 * When a bookmark happens, we cache the count of bookmarks to the objects.
 * We also keep a history of counts.
 * This isn't throttled by `mkue` because counts are fast.
 */

var co = require('co')

var mdb = require('../databases/mongodb')
var syndicate = require('../syndicate')
var onerror = require('../onerror')
var count = require('./count')

syndicate.on('bookmark', function (options) {
  exports.bookmarkers(options).catch(onerror)
  exports.bookmarks(options).catch(onerror)
})

exports.bookmarkers = co.wrap(function* (options) {
  var thing = options.thing
  var type = options.type
  var key = 'count.bookmarkers.' + type

  var num = yield count.bookmarkers(thing, type)

  var a = mdb.collection(thing.collection)
    .findOne('_id', thing._id)
    .set(key, num)

  var b = mdb.collection('bookmarks.history').insert({
    thing: {
      _id: thing._id,
      collection: thing.collection
    },
    key: key,
    value: num,
    date: new Date()
  })

  yield [a, b]
})

exports.bookmarks = co.wrap(function* (options) {
  var collection = options.thing.collection
  var user = options.user
  var type = options.type
  var key = 'count.bookmarks.' + type

  var num = yield count.bookmarks(user, collection, type)

  var a = mdb.collection(user.collection)
    .findOne('_id', user._id)
    .set(key, num)

  var b = mdb.collection('bookmarks.history').insert({
    thing: {
      _id: user._id,
      collection: 'pages'
    },
    key: key,
    value: num,
    date: new Date()
  })

  yield [a, b]
})
