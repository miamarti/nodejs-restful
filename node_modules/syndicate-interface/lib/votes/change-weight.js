
/**
 * When we change a user's weight, we actually recast all of their latest votes with the new weight.
 */

var mdb = require('../databases/mongodb')
var tally = require('./jobs').tally

module.exports = function* (options) {
  var user_id = options.user_id
  var weight = options.weight

  // stream all the user's latest votes
  var stream = mdb.votes.aggregate().match({
    'user._id': user_id
  }).sort({
    'date.created': -1
  }).group({
    _id: {
      thing: '$thing',
      type: '$type'
    },
    value: {
      $first: '$value'
    },
    multiplier: {
      $first: '$multiplier'
    }
  })

  // insert every new vote in a single gigantic insert
  // note that it might actually be better if we don't bulk insert it
  // since we would be increasing memory usage (though we store it for tallying)
  // and because we might be hammering the db with inserts
  var bulk = mdb.votes.parallel()
  var tallies = []
  stream.on('data', function (obj) {
    bulk.insert({
      user: {
        _id: user_id,
      },
      thing: obj._id.thing,
      type: obj._id.type,
      value: obj.value,
      multiplier: obj.multiplier,
      weight: weight,
      source: 'weight-change',
      'date.created': new Date()
    })

    // push things that need to be tallied
    tallies.push(obj._id)
  })

  // wait until the aggregation query is done
  yield new Promise(function (resolve, reject) {
    stream.on('end', resolve)
    stream.on('error', reject)
  })

  // wait until all the inserts are down
  yield bulk

  // dispatch all the necessary tallies
  tallies.forEach(tally)

  // just store the weight value so we have a history of changes
  return weight
}
