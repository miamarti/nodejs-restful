
/**
 * Actually tallies up the votes.
 */

var wilson = require('wilson-score')
var assert = require('assert')

var mdb = require('../databases/mongodb')
var syndicate = require('../syndicate')
var values = require('./values.json')

module.exports = function* (options) {
  var thing = options.thing
  var type = options.type
  var weights = values[type]

  assert(weights)

  var results = yield mdb.votes.aggregate().match({
    // match the votes
    'thing._id': thing._id,
    type: type
  }).sort({
    // sort by newest
    'date.created': -1
  }).group({
    // group by voter, but only use the first vote
    _id: '$thing._id',
    value: {
      $first: '$value'
    },
    multiplier: {
      $first: '$multiplier'
    },
    weight: {
      $first: '$weight'
    }
  }).group({
    // group again, but this time actually accumulating
    _id: '$value',
    count: {
      $sum: 1
    },
    points: {
      $sum: {
        $multiply: [
          '$weight',
          '$multiplier',
        ]
      }
    }
  })

  var votes = {
    count: {},
    score: {
      net: 0,
      up: 0,
      down: 0,
      total: 0
    }
  }

  results.forEach(function (result) {
    var value = result._id
    if (!(value in weight)) return
    var weight = weights[value]
    var points = result.points
    votes.count[value] = result.count
    votes.score.net += weight * points
    votes.score.up += Math.max(weight, 0) * points
    votes.score.down += Math.min(weight, 0) * points
    votes.score.total += points
  })

  votes.score.controversial = controversial(votes.score.up, votes.score.down)

  votes.score.wilson = {
    up: wilson(votes.score.up, votes.score.total),
    down: wilson(votes.score.down, votes.score.total)
  }

  syndicate.emit('tally', options, votes)

  return votes
}

function controversial(up, down, factor) {
  return (up + down)
    / (Math.abs(up - down) + (factor || 1))
}
